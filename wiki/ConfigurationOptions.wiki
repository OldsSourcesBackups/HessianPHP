#summary Configuring clients and servers

= Introduction =

Most configuration options can be set using the standard HessianOptions class or an associative array, more on this later. Some configuration options affect general behaviour and others are aimed only to clients or servers.

= Details =

== General configuration properties ==

*version* : integer

Protocol version to use, posible values are 1 and 2. The default value is 2.

*detectVersion* : boolean

Defines if the library should try to detect protocl version based on incoming data.
Default is false.

*typeMap* : array

Associative array defining mappings between local and remote types (classes)

*interceptors* : array
Array of interceptor objects that implement the IHessianInterceptor interface
that will be executed in every request.

*dateAdapter : object*
Default : Default native DateTime handler
Sets an alternative object to handle date/time serialization and deserialization.
The objects must implement the IHessianDatetimeAdapter interface to deal with
UNIX timestamps. Can be used to replace the standard implementation that returns
and serializes native DateTime objects defined in PHP 5.

*timeZone : string*
default : detected local time zone
String defining a timezone for datetime handling, which is required in newer
versions of PHP.

*saveRaw : boolean*
Tells the transport library to keep a copy of received bytes in raw form. 
Usefull for debugging or logging.

*headers : array*
Array of headers to be included in each request. Not implemented yet.

==Client options==

*transport : string / object*
Default: CURL
Defines the http communication library that clients use to send requests to remote
services. Available options are 'CURL' and 'http'. 'CURL' uses the CURL extension 
to send POST requests which can be faster and better suited for secure communication.
'http' uses standard PHP http stream wrappers (stream_context_create and fopen) to
send the request.
Optionally, you can pass an object that implements IHessianTransport using another
library or method.

*transportOptions : mixed*
Transport specific options to configure the request. In the current provided implementations,
the options are:

  # CURL: array of options to be passed to the curl_setopt_array() function
  # http: array to be merged with the options used in the stream_context_create() function.


==Server options==

*serviceName : string*
default: class name of the serviced object
Published name of service

*displayInfo : boolean*
default: false
When set true, the service will display an information page with the name of
the service and available methods upon a browsing to the service PHP page
(GET request). When false, it will issue an error telling the Hessian requires
POST.

*ignoreOutput: boolean*
default : false
When set to true, the service will ignore all text produced inside
method calls, for example echo() and print() statements. 
NOTE: If any of the methods called in the service writes anything to the screen, 
it will result in a corrupted stream.

==Advanced options==

The following options exist for customizing internal behaviour of the library and it should
be used carefully.

*objectFactory : object*
Replaces the default object factory with an object that implements the 
IHessianObjectFactory interface. Can be used to get objects through IoC for example.

*customWriters : array*
Associative array in which keys are type names and values are implementations
of IHessianCustomWriter. Used to handle serialization of specific types, for 
instance, the IteratorWriter that serialized PHP STD iterators as lists or maps.

*customParsers : array*
Same as the customWriters option, it handles the deserialization of custom types
received in thr response.